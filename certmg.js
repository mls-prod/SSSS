// certmg.js

// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
let selectedIpaFile = null; // –•—Ä–∞–Ω–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π IPA —Ñ–∞–π–ª
let currentImportState = 0; // 0: –Ω–∞—á–∞–ª—å–Ω–æ–µ, 1: –≤—ã–±—Ä–∞–Ω–æ P12, 2: –≤—ã–±—Ä–∞–Ω–æ MobileProvision, 3: –≤–≤–µ–¥–µ–Ω –ø–∞—Ä–æ–ª—å
let selectedP12File = null; // –•—Ä–∞–Ω–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π P12 —Ñ–∞–π–ª
let selectedMobileProvisionFile = null; // –•—Ä–∞–Ω–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π MobileProvision —Ñ–∞–π–ª
let certificatePassword = null; // –•—Ä–∞–Ω–∏—Ç –ø–∞—Ä–æ–ª—å –¥–ª—è P12
let selectedCertificateForManager = null; // –•—Ä–∞–Ω–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è/—É–¥–∞–ª–µ–Ω–∏—è –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ

const certificates = []; // –°–ø–∏—Å–æ–∫ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
const CERTIFICATES_LS_KEY = 'scarletCertificates'; // –ö–ª—é—á –¥–ª—è localStorage

// --- DOM-—ç–ª–µ–º–µ–Ω—Ç—ã ---
// –ö–Ω–æ–ø–∫–∞ –∏ input –¥–ª—è –≤—ã–±–æ—Ä–∞ IPA
const ipaFileInput = document.getElementById('ipaFileInput');
const uploadIpaButton = document.querySelector('.upload-ipa-button');

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
const certificateManagerModal = document.getElementById('certificate-manager-modal');
const closeManagerModalBtn = document.getElementById('close-manager-modal');
const certListManager = document.getElementById('cert-list-manager');
const importCertificateMainButton = document.getElementById('import-certificate-main-button');
const p12FileInput = document.getElementById('p12FileInput'); // –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è P12
const mobileprovisionFileInput = document.getElementById('mobileprovisionFileInput'); // –°–∫—Ä—ã—Ç—ã–π input –¥–ª—è MobileProvision
const closeManagerFooterBtn = document.getElementById('close-manager-footer-button');

// –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
const passwordModal = document.getElementById('password-modal');
const passwordInput = document.getElementById('password-input');
const cancelPasswordModalBtn = document.getElementById('cancel-password-modal');
const confirmPasswordModalBtn = document.getElementById('confirm-password-modal');
const passwordModalTitle = document.querySelector('#password-modal .modal-header h2'); // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª–∫–∏ –ø–∞—Ä–æ–ª—è

// --- –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ ---
function showCertificateManagerModal() {
    if (!certificateManagerModal) { console.error("Certificate Manager Modal not found!"); return; }
    console.log("Showing Certificate Manager Modal...");
    certificateManagerModal.classList.add('active');
    renderCertListManager();
}

function hideCertificateManagerModal() {
    if (!certificateManagerModal) return;
    certificateManagerModal.classList.remove('active');
}

function showPasswordModal(promptTitle = "Enter Password") {
    if (!passwordModal) { console.error("Password Modal not found!"); return; }
    if (passwordModalTitle) passwordModalTitle.textContent = promptTitle;
    passwordInput.value = '';
    passwordModal.classList.add('active');
}

function hidePasswordModal() {
    if (!passwordModal) return;
    passwordModal.classList.remove('active');
    passwordInput.value = '';
}

// --- –§—É–Ω–∫—Ü–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ ---
function saveCertificates() {
    localStorage.setItem(CERTIFICATES_LS_KEY, JSON.stringify(certificates));
    console.log(`Saved ${certificates.length} certificates.`);
}

function loadCertificates() {
    console.log("Loading certificates...");
    const storedCerts = localStorage.getItem(CERTIFICATES_LS_KEY);
    if (storedCerts) {
        try {
            certificates.length = 0;
            JSON.parse(storedCerts).forEach(certData => {
                certificates.push(certData);
            });
            console.log(`Loaded ${certificates.length} certificates.`);
        } catch (error) {
            console.error("Error parsing certificates from localStorage:", error);
            certificates.length = 0;
        }
    } else {
        certificates.length = 0;
        console.log("No certificates found in localStorage.");
    }
    renderCertListManager();
}

function renderCertListManager() {
    if (!certListManager) { console.error("Cert list manager container not found!"); return; }
    certListManager.innerHTML = '';

    if (certificates.length === 0) {
        certListManager.innerHTML = '<p class="empty-list-message">No certificates imported yet.</p>';
        return;
    }

    certificates.forEach((cert, index) => {
        const certItem = document.createElement('div');
        certItem.classList.add('cert-item-manager');

        const isRevoked = cert.revoked || false;
        const statusClass = isRevoked ? 'revoked' : 'signed';
        const statusText = isRevoked ? 'Revoked' : 'Signed';

        let expiresText = 'Unknown';
        try {
            if (cert.expires) {
                const date = new Date(cert.expires);
                if (!isNaN(date.getTime())) {
                    expiresText = date.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric' });
                }
            }
        } catch (e) {
            console.error("Error formatting expiry date:", cert.expires, e);
            expiresText = 'Invalid Date';
        }

        certItem.innerHTML = `
            <div class="radio-wrapper" data-cert-index="${index}">
                <div class="radio-button ${selectedCertificateForManager === cert ? 'selected' : ''}"></div>
            </div>
            <div class="cert-details">
                <div class="cert-name">${cert.name || 'Unnamed Certificate'}</div>
                <div class="cert-meta">
                    <span class="cert-expires-label">Expires:</span>
                    <span class="cert-expires-value">${expiresText}</span>
                    <span class="cert-status-label">Status:</span>
                    <span class="cert-status-value ${statusClass}">${statusText}</span>
                </div>
            </div>
            <button class="delete-cert-button" aria-label="Delete Certificate" data-cert-index="${index}">üóëÔ∏è</button> <!-- –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è -->
        `;

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        certItem.querySelector('.radio-wrapper').addEventListener('click', () => {
            selectCertificateForManager(cert);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        certItem.querySelector('.delete-cert-button').addEventListener('click', (event) => {
            event.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
            deleteCertificate(index);
        });

        certListManager.appendChild(certItem);
    });
}

function selectCertificateForManager(cert) {
    selectedCertificateForManager = cert;
    renderCertListManager();
}

function deleteCertificate(index) {
    if (index >= 0 && index < certificates.length) {
        const certName = certificates[index].name || 'Unnamed Certificate';
        if (confirm(`Are you sure you want to delete certificate "${certName}"?`)) {
            certificates.splice(index, 1); // –£–¥–∞–ª—è–µ–º –∏–∑ –º–∞—Å—Å–∏–≤–∞
            saveCertificates();
            renderCertListManager(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            // –ï—Å–ª–∏ —É–¥–∞–ª–µ–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±—ã–ª –≤—ã–±—Ä–∞–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä
            if (selectedCertificateForManager && selectedCertificateForManager === certName) { // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–±—ä–µ–∫—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç
                selectedCertificateForManager = null;
            }
            console.log(`Certificate at index ${index} deleted.`);
        }
    }
}

// --- –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ (–ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è) ---
function startCertificateImportProcess() {
    // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω–æ–≤–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    currentImportState = 0;
    selectedP12File = null;
    selectedMobileProvisionFile = null;
    certificatePassword = null;
    selectedCertificateForManager = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä, –µ—Å–ª–∏ –±—ã–ª

    // 1. –¢—Ä–∏–≥–≥–µ—Ä –≤—ã–±–æ—Ä–∞ P12 —Ñ–∞–π–ª–∞
    console.log("Starting import: Prompting for .p12 file...");
    p12FileInput.click();
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è P12 —Ñ–∞–π–ª–∞
function handleP12FileSelect() {
    if (p12FileInput.files.length > 0) {
        selectedP12File = p12FileInput.files[0];
        console.log(`P12 file selected: ${selectedP12File.name}`);
        currentImportState = 1; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: P12 –≤—ã–±—Ä–∞–Ω

        // 2. –¢—Ä–∏–≥–≥–µ—Ä –≤—ã–±–æ—Ä–∞ MobileProvision —Ñ–∞–π–ª–∞
        setTimeout(() => {
            console.log("Prompting for .mobileprovision file...");
            mobileprovisionFileInput.click();
        }, 100);
    } else {
        console.log("P12 file selection cancelled.");
        resetImportProcess(); // –°–±—Ä–æ—Å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è MobileProvision —Ñ–∞–π–ª–∞
function handleMobileProvisionFileSelect() {
    if (mobileprovisionFileInput.files.length > 0) {
        selectedMobileProvisionFile = mobileprovisionFileInput.files[0];
        console.log(`MobileProvision file selected: ${selectedMobileProvisionFile.name}`);
        currentImportState = 2; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: MobileProvision –≤—ã–±—Ä–∞–Ω

        // 3. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å
        showPasswordModal("Enter password for .p12 file");
    } else {
        console.log("MobileProvision file selection cancelled.");
        resetImportProcess(); // –°–±—Ä–æ—Å, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è
function handlePasswordConfirmation() {
    if (passwordInput.value) {
        certificatePassword = passwordInput.value;
        console.log("Password entered.");
        hidePasswordModal();
        currentImportState = 3; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –ø–∞—Ä–æ–ª—å –≤–≤–µ–¥–µ–Ω

        // 4. –§–∏–Ω–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –≤ —Å–ø–∏—Å–æ–∫
        finalizeCertificateImport();
    } else {
        alert("Password cannot be empty.");
        // –ù–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —à–∞–Ω—Å –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å —Å–Ω–æ–≤–∞
    }
}

// –°–±—Ä–æ—Å –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏–º–ø–æ—Ä—Ç–∞
function resetImportProcess() {
    currentImportState = 0;
    selectedP12File = null;
    selectedMobileProvisionFile = null;
    certificatePassword = null;
    p12FileInput.value = null;
    mobileprovisionFileInput.value = null;
    console.log("Import process reset.");
}

// –§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥ –∏–º–ø–æ—Ä—Ç–∞
function finalizeCertificateImport() {
    if (!selectedP12File || !selectedMobileProvisionFile || !certificatePassword || currentImportState < 3) {
        console.error("Import process failed: Missing required information or incorrect state.");
        alert("Error during import: missing required information or process interrupted.");
        resetImportProcess();
        return;
    }

    console.log(`Finalizing import for P12: ${selectedP12File.name}, MP: ${selectedMobileProvisionFile.name}, Password: [provided]`);

    // --- –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ P12, MobileProvision –∏ –ø–∞—Ä–æ–ª—è ---
    // –≠—Ç–æ —Å–ª–æ–∂–Ω–∞—è –∑–∞–¥–∞—á–∞, —Ç—Ä–µ–±—É—é—â–∞—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫.
    // –ù–∏–∂–µ - —Ç–æ–ª—å–∫–æ –∑–∞–≥–ª—É—à–∫–∞.

    const newCertData = {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è P12 —Ñ–∞–π–ª–∞
        id: `cert_${Date.now()}_${Math.random().toString(16).slice(2)}`,
        name: `${selectedP12File.name.replace('.p12', '')} + ${selectedMobileProvisionFile.name.replace('.mobileprovision', '')}`, // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –∏–º—è
        // –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞–≥–ª—É—à–∫–∞)
        expires: new Date(Date.now() + 365 * 24 * 60 * 60 * 1000).toISOString(), // –ü—Ä–∏–º–µ—Ä–Ω–æ –≥–æ–¥ –≤ –±—É–¥—É—â–µ–º
        revoked: false, // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –æ—Ç–æ–∑–≤–∞–Ω
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥—É—Ç –¥–∞–Ω–Ω—ã–µ, –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤
        // p12RawData: selectedP12File, // –ò–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –Ω–µ–≥–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å
        // mpRawData: selectedMobileProvisionFile,
        // passwordHash: hash(certificatePassword) // –ü–∞—Ä–æ–ª—å –ª—É—á—à–µ –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
    };

    certificates.push(newCertData);
    saveCertificates();
    renderCertListManager(); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ

    alert(`Certificate "${newCertData.name}" imported successfully (mock data).`);

    resetImportProcess(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
function setupCertificateManager() {
    console.log("Setting up certificate manager event listeners...");

    // 1. –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ IPA (–∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ) / –û—Ç–∫—Ä—ã—Ç–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ)
    let holdTimer = null;
    const holdDuration = 3000;

    const startHoldOrClick = (event) => {
        event.preventDefault();
        if (event.type === 'mousedown' || event.type === 'touchstart') {
            console.log(`Upload IPA button: ${event.type} detected. Starting hold timer...`);
            holdTimer = setTimeout(() => {
                console.log("Hold duration reached. Opening Certificate Manager...");
                showCertificateManagerModal();
                holdTimer = null; // –¢–∞–π–º–µ—Ä —Å—Ä–∞–±–æ—Ç–∞–ª
            }, holdDuration);
        } else if (event.type === 'mouseup' || event.type === 'touchend') {
            if (holdTimer) { // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –±—ã–ª –∑–∞–ø—É—â–µ–Ω –∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª (–∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∂–∞—Ç–∏–µ)
                clearTimeout(holdTimer);
                holdTimer = null;
                console.log("Short press detected. Triggering ipaFileInput...");
                ipaFileInput.click(); // –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
            } else {
                console.log("Hold completed or already handled.");
            }
        }
    };

    uploadIpaButton.addEventListener('mousedown', startHoldOrClick);
    uploadIpaButton.addEventListener('touchstart', startHoldOrClick);
    uploadIpaButton.addEventListener('mouseup', startHoldOrClick);
    uploadIpaButton.addEventListener('touchend', startHoldOrClick);
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –¥—Ä—É–≥–∞—è –∫–Ω–æ–ø–∫–∞
    uploadIpaButton.addEventListener('click', (event) => event.preventDefault());

    // 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ IPA —Ñ–∞–π–ª–∞
    ipaFileInput.addEventListener('change', () => {
        if (ipaFileInput.files.length > 0) {
            selectedIpaFile = ipaFileInput.files[0];
            if (selectedIpaFile.name.endsWith('.ipa')) {
                console.log(`Selected IPA file: ${selectedIpaFile.name}`);
                alert(`IPA file "${selectedIpaFile.name}" selected. Use the Certificate Manager to import certificates and proceed with installation.`);
            } else {
                alert("Please select a valid .ipa file.");
                selectedIpaFile = null;
            }
        } else {
            console.log("IPA file selection cancelled.");
            selectedIpaFile = null;
        }
        ipaFileInput.value = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏–Ω–ø—É—Ç
    });

    // 3. –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏
    if (closeManagerModalBtn) closeManagerModalBtn.addEventListener('click', hideCertificateManagerModal);
    if (closeManagerFooterBtn) closeManagerFooterBtn.addEventListener('click', hideCertificateManagerModal);
    if (certificateManagerModal) {
        certificateManagerModal.addEventListener('click', (event) => {
            if (event.target === certificateManagerModal) {
                hideCertificateManagerModal();
            }
        });
    }

    // 4. –û—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    if (importCertificateMainButton) {
        importCertificateMainButton.addEventListener('click', startCertificateImportProcess);
    }

    // 5. –§–∞–π–ª–æ–≤—ã–µ –∏–Ω–ø—É—Ç—ã –¥–ª—è P12 –∏ MobileProvision
    // –≠—Ç–∏ –∏–Ω–ø—É—Ç—ã –≤—ã–∑—ã–≤–∞—é—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ –∫–Ω–æ–ø–∫–∞–º–∏
    if (p12FileInput) {
        p12FileInput.addEventListener('change', handleP12FileSelect);
    }
    if (mobileprovisionFileInput) {
        mobileprovisionFileInput.addEventListener('change', handleMobileProvisionFileSelect);
    }

    // 6. –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è
    if (cancelPasswordModalBtn) {
        cancelPasswordModalBtn.addEventListener('click', () => {
            hidePasswordModal();
            resetImportProcess(); // –°–±—Ä–æ—Å –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è
        });
    }
    if (confirmPasswordModalBtn) {
        confirmPasswordModalBtn.addEventListener('click', handlePasswordConfirmation);
    }
    if (passwordModal) {
        passwordModal.addEventListener('click', (event) => {
            if (event.target === passwordModal) {
                hidePasswordModal();
                resetImportProcess(); // –°–±—Ä–æ—Å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–∫–∏ –≤–Ω–µ
            }
        });
    }

    // 7. –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    loadCertificates();
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ---
// –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ DOM,
// –∏ —á—Ç–æ –æ–Ω–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç document.addEventListener('DOMContentLoaded', ...) —Å–∞–º–∞ –ø–æ —Å–µ–±–µ.
// –í—ã–∑–æ–≤–∏—Ç–µ –µ–µ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ script.js:
// setupCertificateManager();
// –ò–ª–∏, –µ—Å–ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –∏ –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ:
document.addEventListener('DOMContentLoaded', setupCertificateManager);